/**
 * Collection organization scheme:
 *
 * Users
 * --------
 * This collection is created by the account package.
 *  _id:            User id generated on registration
 *  username:       Unused
 *  email:          Users email (and sign in)
 *  password
 *  queries:        Array of queries that the user added. This may include queries that the user doesn't own
 *  starredQueries: Array of queries that the user starred
 *
 * Queries
 * --------
 *  _id:            Generated by mongo, used as the URL to access it (/query/_id)
 *  name:           A user given name for the query, nullable
 *  regions:        Array referencing regions._id that were a part of this query
 *  createdDate:    Date the query was created
 *  owner:          userID of the user that created the query, or null if anon
 *  filters:        Array of filters to perform on junctions. Each filter has the format:
 *                  {  "filter" : "junctions.xxx",
 *                      "op" : "some_mongo_operator",
 *                      "val" : some_value
 *                  }
 *  groups:         Array of user selected groups of junctionIds.
 *                  These junctions may no longer be in the query if the relevant region was removed,
 *                  or if a filter removes it. Each group has the format:
 *                  {   "_id" : "id"
 *                      "name" : "group name",
 *                      "junctions" : [...]
 *                  }
 *
 *  processors:     Array of processor configs and results. The processors use junction groups,
 *                  which may be deleted after a processor is created. Each has the following format.
 *                  inputGroup and type matches what's found in the index.
 *                  {   "_id" : "id",
 *                      "type" : "processor type key from index",
 *                      "inputGroups" : {    "inputGroup[0]" : groupId,
 *                                           "inputGroup[1]" : groupId,
 *                                            ...
 *                                      },
 *                      "results" : someObj,
 *                      "params" : {    "someParam" : someVal, ...}
 *
 *                  }
 *
 *
 *  Regions
 *  --------
 *  _id:            Lower case and trimmed ID of the region used in the Snaptron query. E.G: "cd99", "ch6:1-1000"
 *  loadedDate:     Date when this was loaded. null if never loaded (or failed to load)
 *  junctions:      Array of junctions._id
 *  metadata:       Array of {key:"someKey", value:"someValue"} metadata elements returned by Snaptron
 *  models:         Array of gene model objects. See the schema for the format of a model object
 *
 *  Junctions
 *  ---------
 *  _id:            Value of snaptron_id returned by Snaptron
 *
 *  ** The rest of the fields are generated by Snaptron's response. The following are assumed to exist**
 *  samples_count
 *  coverage_sum
 *  coverage_avg
 *  coverage_median
 *  start
 *  stop
 *  length
 *
 *  Samples
 *  ---------
 *  _id:            Value of sample_id returned by Snaptron
 *
 *  The rest of the fields are dependant on what is returned by Snaptron
 */

//<editor-fold desc="Collection Globals">
SAMPLE_ID_FIELD = "intropolis_sample_id_i";

USER_QRYS          = "queries";
USER_STARRED_QRYS  = "starredQueries";
USER_USERNAME      = "username";
USER_EMAILS        = "emails";
USER_EMAIL_ADDRESS = "address";
USER_PROFILE       = "profile";

QRY_NAME         = "name";
QRY_REGIONS      = "regions";
QRY_FILTERS      = "filters";
QRY_CREATED_DATE = "createdDate";
QRY_OWNER        = "owner";
QRY_GROUPS       = "groups";
QRY_GROUP_NAME   = "name";
QRY_GROUP_JNCTS  = "junctions";

QRY_FILTER_FIELD        = "filter";
QRY_FILTER_OP           = "op";
QRY_FILTER_VAL          = "val";
QRY_FILTER_SAMPLE_COUNT = "samples_count";
QRY_FILTER_COV_SUM      = "coverage_sum";
QRY_FILTER_COV_AVG      = "coverage_avg";
QRY_FILTER_COV_MED      = "coverage_median";
QRY_FILTER_LENGTH       = "length";

QRY_PROCESSORS             = "processors";
QRY_PROCESSOR_TYPE         = "type";
QRY_PROCESSOR_INPUT_GROUPS = "inputGroups";
QRY_PROCESSOR_RESULTS      = "results";
QRY_PROCESSOR_PARAMS       = "params";

REGION_METADATA         = "metadata";
REGION_LOADED_DATE      = "loadedDate";
REGION_JUNCTIONS        = "junctions";
REGION_METADATA_KEY     = "key";
REGION_METADATA_VAL     = "value";
REGION_MODELS           = "models";
REGION_MODEL_SRC_TYPE   = "sourceType";
REGION_MODEL_REF        = "reference";
REGION_MODEL_SRC        = "source";
REGION_MODEL_FEAT_TYPE  = "featureType";
REGION_MODEL_START      = "start";
REGION_MODEL_END        = "end";
REGION_MODEL_STRAND     = "strand";
REGION_MODEL_TRANSCRIPT = "transcript";
REGION_MODEL_CDS_START  = "cdsStart";
REGION_MODEL_CDS_END    = "cdsEnd";
REGION_MODEL_EXONS      = "exons";

JNCT_ID_FIELD      = "snaptron_id";
JNCT_ANNOTATED_KEY = "annotated?";
JNCT_SAMPLES_KEY   = "samples";
JNCT_COVERAGE_KEY  = "read_coverage_by_sample";
JNCT_COL_TYPES     = {
    "DataSource:Type": "str",
    "snaptron_id": "str",
    "chromosome": "str",
    "start": "int",
    "end": "int",
    "length": "int",
    "strand": "str",
    "annotated": "bool",
    "left_motif": "str",
    "right_motif": "str",
    "left_annotated": "str",
    "right_annotated": "str",
    "samples": "str[]",
    "read_coverage_by_sample": "float[]",
    "samples_count": "int",
    "coverage_sum": "float",
    "coverage_avg": "float",
    "coverage_median": "float",
    "source_dataset_id": "str"
};
//</editor-fold>

Users     = Meteor.users;
Queries   = new Mongo.Collection("queries");
Regions   = new Mongo.Collection("regions");
Junctions = new Mongo.Collection("junctions");
Samples   = new Mongo.Collection("samples");

if (Meteor.isServer) {
    // Index all text attributes for sample searching
    Samples._ensureIndex({
        "$**": "text"
    }, {
        weights: {
            /**
             * Large weights for identifier attrs, and titles/descriptions of samples
             */
            run_accession_s: 10,
            sample_accession_s: 10,
            experiment_accession_s: 10,
            study_accession_s: 10,
            experiment_title_t: 10,
            study_title_t: 10,
            study_abstract_t: 5,
            study_type_t: 5,
            sample_attribute_t: 5,
            cell_type_t: 5
        }
    });
}

Meteor.methods({
    /**
     * If the current user is an admin, clears all loaded
     * samples, junctions, and regions
     */
    "resetSnaptronData": function () {
        if (Roles.userIsInRole(Meteor.user(), ['admin'])) {
            Samples.remove({});
            Junctions.remove({});
            Regions.remove({});
        }
    }
});